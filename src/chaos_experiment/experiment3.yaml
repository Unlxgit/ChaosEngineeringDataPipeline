apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
 name: forecast-hpa
spec:
 scaleTargetRef:
   apiVersion: apps/v1
   kind: Deployment
   name: forecast-deployment
 minReplicas: 1
 maxReplicas: 2
 targetCPUUtilizationPercentage: 50
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: forecast-deployment
  labels:
    app: forecast
spec:
  replicas: 1
  selector:
    matchLabels:
      app: forecast
  template:
    metadata:
      labels:
        app: forecast
    spec:
      containers:
      - name: forecast
        image: forecast:latest
        imagePullPolicy: Never
        ports:
        - containerPort: 80
        resources:
          requests:
              cpu: 500m  # Minimum 0.5 CPU core
              memory: 512Mi  # Minimum 512 MiB memory
          limits:
              cpu: 2000m  # Maximum 2 CPU cores
              memory: 2048Mi  # Maximum 2 GiB memory
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 20
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 80
          initialDelaySeconds: 20
          periodSeconds: 10

---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
 name: api-gateway-hpa
spec:
 scaleTargetRef:
   apiVersion: apps/v1
   kind: Deployment
   name: api-gateway-deployment
 minReplicas: 2
 maxReplicas: 10
 targetCPUUtilizationPercentage: 50
---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway-service
spec:
  selector:
    app: api-gateway
  ports:
    - protocol: TCP
      port: 80
      nodePort: 30000
  type: NodePort

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
    spec:
      containers:
      - name: api-gateway
        image: api-gateway:latest
        imagePullPolicy: Never
        ports:
        - containerPort: 80
        resources:
          requests:
            cpu: 50m
            memory: 16Mi
          limits:
            cpu: 100m
            memory: 64Mi
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 20
          periodSeconds: 10
        readinessProbe:
            httpGet:
                path: /ready
                port: 80
            initialDelaySeconds: 20
            periodSeconds: 10

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: price-generation-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: price-generation
  template:
    metadata:
      labels:
        app: price-generation
    spec:
      containers:
      - name: price-generation
        image: price-generation:latest
        imagePullPolicy: Never
        resources:
          limits:
            memory: 64Mi
            cpu: 100m
        ports:
        - containerPort: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  labels:
    app: redis
spec:
  selector:
    matchLabels:
      app: redis
  replicas: 1
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: master
        image: k8s.gcr.io/redis
        ports:
        - containerPort: 6379
        volumeMounts:
        - mountPath: "/data"
          name: redis-volume
        resources:
          requests:
            cpu: 25m
            memory: 100Mi
          limits:
            cpu: 100m
            memory: 100Mi
      volumes:
      - name: redis-volume
        persistentVolumeClaim:
          claimName: redis-volume-claim
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
spec:
  selector:
    app: redis
  ports:
    - protocol: TCP
      port: 6379
      targetPort: 6379
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-volume-claim
spec:
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  resources:
    requests:
      storage: 100M
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  labels:
    app: postgres
spec:
  selector:
    matchLabels:
      app: postgres
  replicas: 1
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:latest
        ports:
        - containerPort: 5432
        volumeMounts:
        - mountPath: "/var/lib/postgresql/data"
          name: postgres-volume
        env:
        - name: POSTGRES_DB
          value: mydatabase
        - name: POSTGRES_USER
          value: myuser
        - name: POSTGRES_PASSWORD
          value: mypassword
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
      volumes:
      - name: postgres-volume
        persistentVolumeClaim:
          claimName: postgres-volume-claim
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-volume-claim
spec:
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  resources:
    requests:
      storage: 1Gi

